#include "fileReader.h"

void tmp_class::static_func()
{}

std::vector<std::vector<std::string> > tmp_class::readFile(std::string fileName)
{
    
    //using namespace std;
    using std::ifstream;
    using std::vector;
    using std::string;

    ifstream inFile;
    string inBuffer, token;

    vector<string> lineContents;
    vector<vector<string> > saveContents;
    std::stringstream streamBuffer;

    // read in file line by line
    inFile.open(fileName.c_str());
    if((bool)inFile)
    {   
        while(getline(inFile, inBuffer))
        {
            // convert string to buffer and parse by spaces
            streamBuffer << inBuffer;
            while(streamBuffer >> token)
            {
                
                lineContents.push_back(token);
            }
            saveContents.push_back(lineContents);

            // clear buffers and streams
            lineContents.clear();
            streamBuffer.clear();
        }

        inFile.close();
        return saveContents;
    }
    else
        throw string("Could not open file");
}

std::vector<std::string > tmp_class::readFile_unparsed(std::string fileName)
{
    //using namespace std;

    std::ifstream inFile;
    std::string inBuffer;

    std::vector<std::string > saveContents;

    // read in file line by line
    inFile.open(fileName.c_str());
    while(getline(inFile, inBuffer))
    {
        saveContents.push_back(inBuffer);
    }

    inFile.close();
    return saveContents;
}

std::vector<std::vector<std::string> > fileReader::readFile(std::string fileName)
{
    
    //using namespace std;
    using std::ifstream;
    using std::vector;
    using std::string;

    ifstream inFile;
    string inBuffer, token;

    vector<string> lineContents;
    vector<vector<string> > saveContents;
    std::stringstream streamBuffer;

    // read in file line by line
    inFile.open(fileName.c_str());
    if((bool)inFile)
    {   
        while(getline(inFile, inBuffer))
        {
            // convert string to buffer and parse by spaces
            streamBuffer << inBuffer;
            while(streamBuffer >> token)
            {
                
                lineContents.push_back(token);
            }
            saveContents.push_back(lineContents);

            // clear buffers and streams
            lineContents.clear();
            streamBuffer.clear();
        }

        inFile.close();
        return saveContents;
    }
    else
        throw string("Could not open file");
}

std::vector<std::string > fileReader::readFile_unparsed(std::string fileName)
{
    //using namespace std;

    std::ifstream inFile;
    std::string inBuffer;

    std::vector<std::string > saveContents;

    // read in file line by line
    inFile.open(fileName.c_str());
    while(getline(inFile, inBuffer))
    {
        saveContents.push_back(inBuffer);
    }

    inFile.close();
    return saveContents;
}

//xyzData fileReader::readXYZ(std::string fileName)
void fileReader::readXYZ()
{
    return;
	// std::ifstream molFile;
	// std::vector<double> tmpVec;
	// std::string type;
	// double x, y, z;
	// int atomIdx = 0;
    // coords.clear();
    // atoms.clear();
    // //xyzData data;
	// try
	// {
	// 	checkFileExt(fileName, "xyz");
	// }
	// catch (const char* msg)
	// {
	// 	std::cerr << msg;
	// 	throw "Error: Could not import molecule file\n";
	// }

    
	// //open molecule file for reading
	// molFile.open(fileName.c_str());

	// // skip first two lines
	// std::string tmpStr;
	// getline(molFile, tmpStr);
	// getline(molFile, tmpStr);

	// //read in molecule file
	// while (molFile >> type >> x >> y >> z)
	// {
    //     Vec3 pos(x, y, z);
    //     coords.push_back(pos);
    //     atoms.push_back(type);
	// 	// data.pos_x.push_back(x);
	// 	// data.pos_y.push_back(y);
	// 	// data.pos_z.push_back(z);
    //     // data.atoms.push_back(type);
	// }
	// molFile.close();

}

void fileReader::checkFileExt(const std::string inFile, const std::string ext)
{
    //convert file name to string.
	//old code took a char array as an input
	//so the string stream is still kept here;
    std::stringstream ss;
    std::string fileName;
    ss << inFile;
    ss >> fileName;

    //get file extension
    int period = fileName.find_last_of(".");
    if(period < 0)
    	throw "Error: No file extension given\n";

    std::string fileExt = fileName.substr(period + 1);
    std::transform(fileExt.begin(), fileExt.end(), fileExt.begin(), ::tolower);

    if (fileExt.compare(ext.c_str()))
    	throw "Error: Incorrect file type, must be XYZ\n";
}